
// vandor page follow button  ==============================================================================================================

// 1. Create table on theme setup
add_action('after_setup_theme', function () {
    global $wpdb;
    $table = $wpdb->prefix . 'post_followers';
    if ($wpdb->get_var("SHOW TABLES LIKE '$table'") !== $table) {
        require_once ABSPATH . 'wp-admin/includes/upgrade.php';
        $charset_collate = $wpdb->get_charset_collate();
        $sql = "CREATE TABLE $table (
            id BIGINT UNSIGNED NOT NULL AUTO_INCREMENT,
            post_id BIGINT UNSIGNED NOT NULL,
            user_id BIGINT UNSIGNED DEFAULT NULL,
            ip_address VARCHAR(100) DEFAULT NULL,
            cookie_hash VARCHAR(64) DEFAULT NULL,
            followed_at DATETIME DEFAULT CURRENT_TIMESTAMP,
            PRIMARY KEY (id),
            UNIQUE KEY unique_user (post_id, user_id),
            UNIQUE KEY unique_ip (post_id, ip_address),
            UNIQUE KEY unique_cookie (post_id, cookie_hash)
        ) $charset_collate;";
        dbDelta($sql);
    }
});

// 2. AJAX follow/unfollow handler
add_action('wp_ajax_custom_follow_vendor', 'custom_follow_vendor_handler');
add_action('wp_ajax_nopriv_custom_follow_vendor', 'custom_follow_vendor_handler');

function custom_follow_vendor_handler() {
    check_ajax_referer('follow_nonce', 'nonce');
    global $wpdb;

    $post_id = intval($_POST['post_id'] ?? 0);
    if (!$post_id) wp_send_json_error('Invalid post ID');

    $user_id = get_current_user_id();
    $ip = $_SERVER['REMOTE_ADDR'] ?? '';
    $cookie_hash = $_COOKIE['follow_cookie_hash'] ?? '';
    $table = $wpdb->prefix . 'post_followers';

    $existing = $wpdb->get_row($wpdb->prepare(
        "SELECT id FROM $table WHERE post_id = %d AND (user_id = %d OR ip_address = %s OR cookie_hash = %s) LIMIT 1",
        $post_id, $user_id, $ip, $cookie_hash
    ));

    if ($existing) {
        $wpdb->delete($table, ['id' => $existing->id]);
        $total = $wpdb->get_var($wpdb->prepare("SELECT COUNT(*) FROM $table WHERE post_id = %d", $post_id));
        wp_send_json_success(['followers' => intval($total), 'followed' => false]);
    } else {
        $wpdb->insert($table, [
            'post_id' => $post_id,
            'user_id' => $user_id ?: null,
            'ip_address' => $ip,
            'cookie_hash' => $cookie_hash,
            'followed_at' => current_time('mysql')
        ]);
        $total = $wpdb->get_var($wpdb->prepare("SELECT COUNT(*) FROM $table WHERE post_id = %d", $post_id));
        wp_send_json_success(['followers' => intval($total), 'followed' => true]);
    }
}

// 3. Shortcode to display follow button
add_shortcode('vendor_follow', function () {
    global $wpdb, $post;
    if (!$post) return 'Error: No post found.';

    $post_id = $post->ID;
    $user_id = get_current_user_id();
    $ip = $_SERVER['REMOTE_ADDR'] ?? '';
    $cookie_name = 'follow_cookie_hash';

    if (empty($_COOKIE[$cookie_name])) {
        $cookie_hash = bin2hex(random_bytes(16));
        setcookie($cookie_name, $cookie_hash, time() + YEAR_IN_SECONDS, COOKIEPATH, COOKIE_DOMAIN);
        $_COOKIE[$cookie_name] = $cookie_hash;
    } else {
        $cookie_hash = $_COOKIE[$cookie_name];
    }

    $table = $wpdb->prefix . 'post_followers';
    $already_followed = $wpdb->get_var($wpdb->prepare(
        "SELECT COUNT(*) FROM $table WHERE post_id = %d AND (user_id = %d OR ip_address = %s OR cookie_hash = %s)",
        $post_id, $user_id, $ip, $cookie_hash
    )) > 0;

    $total_followers = $wpdb->get_var($wpdb->prepare(
        "SELECT COUNT(*) FROM $table WHERE post_id = %d",
        $post_id
    ));

    ob_start(); ?>
    <style>
        .follow-btn.followed {
            background-color: #ccc;
            cursor: pointer;
        }
        .follow-btn {
            padding: 8px 16px;
            background: #0073aa;
            color: #fff;
            border: none;
            border-radius: 4px;
            margin-top: 6px;
        }
        .followers-count {
            margin-bottom: 6px;
        }
    </style>
    <div class="follow-vendor-wrapper" data-postid="<?php echo esc_attr($post_id); ?>">
        <div class="followers-count"><?php echo intval($total_followers); ?> Followers</div>
        <button class="follow-btn <?php echo $already_followed ? 'followed' : ''; ?>">
            <?php echo $already_followed ? 'Followed' : 'Follow'; ?>
        </button>
    </div>
    <?php return ob_get_clean();
});

// 4. JavaScript to handle button click
add_action('wp_footer', function () {
    if (!is_singular()) return;
    ?>
    <script>
    document.addEventListener("DOMContentLoaded", function () {
        document.querySelectorAll('.follow-btn').forEach(function (btn) {
            btn.addEventListener('click', function () {
                const wrapper = btn.closest('.follow-vendor-wrapper');
                const postId = wrapper.dataset.postid;

                fetch('<?php echo admin_url('admin-ajax.php'); ?>', {
                    method: 'POST',
                    credentials: 'same-origin',
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded',
                    },
                    body: new URLSearchParams({
                        action: 'custom_follow_vendor',
                        nonce: '<?php echo wp_create_nonce('follow_nonce'); ?>',
                        post_id: postId
                    })
                }).then(res => res.json()).then(data => {
                    if (data.success) {
                        const countEl = wrapper.querySelector('.followers-count');
                        countEl.textContent = data.data.followers + " Followers";
                        countEl.style.display = "block";

                        if (data.data.followed) {
                            btn.textContent = "Followed";
                            btn.classList.add("followed");
                        } else {
                            btn.textContent = "Follow";
                            btn.classList.remove("followed");
                        }
                    } else {
                        alert(data.data || "Error occurred.");
                    }
                });
            });
        });
    });
    </script>
    <?php
});


// show page ======================================================================================================================
add_action('admin_menu', function () {
    add_menu_page('CSV Page Matcher', 'CSV Page Matcher', 'manage_options', 'csv-page-matcher', 'csv_page_matcher_admin_page');
});

function csv_page_matcher_admin_page() {
    echo '<div class="wrap"><h2>Upload CSV to Match Page Titles</h2>';

    // Handle deletion first
    if (isset($_POST['confirm_delete']) && current_user_can('delete_pages')) {
        if (!isset($_POST['_wpnonce']) || !wp_verify_nonce($_POST['_wpnonce'], 'csv_page_delete')) {
            echo '<div class="error"><p>Security check failed.</p></div>';
        } else {
            $ids = json_decode(stripslashes($_POST['delete_pages']), true);
            if (is_array($ids)) {
                foreach ($ids as $id) {
                    wp_delete_post($id, true);
                }
                echo '<div class="updated"><p>Selected pages were permanently deleted.</p></div>';
            }
        }
    }

    // Handle CSV upload and matching
    if ($_SERVER['REQUEST_METHOD'] === 'POST' && isset($_FILES['csv_file'])) {
        if (!isset($_POST['_wpnonce']) || !wp_verify_nonce($_POST['_wpnonce'], 'csv_page_upload')) {
            echo '<div class="error"><p>Security check failed.</p></div>';
        } else {
            $file = $_FILES['csv_file']['tmp_name'];
            if (($handle = fopen($file, 'r')) !== false) {
                $header = fgetcsv($handle);
                $nameIndex = array_search('name', array_map('strtolower', $header));
                if ($nameIndex === false) {
                    echo '<div class="error"><p><strong>Error:</strong> CSV must contain a "name" column.</p></div>';
                } else {
                    $names = [];
                    while (($data = fgetcsv($handle)) !== false) {
                        if (!empty($data[$nameIndex])) {
                            $names[] = trim($data[$nameIndex]);
                        }
                    }
                    fclose($handle);

                    $matchedPages = [];
                    foreach ($names as $name) {
                        $page = get_page_by_title($name, OBJECT, 'page');
                        if ($page) {
                            $matchedPages[] = $page->ID;
                        }
                    }

                    echo '<h3>Matched Pages:</h3>';

                    if (!empty($matchedPages)) {
                        echo '<p><strong>Total Matched Pages:</strong> ' . count($matchedPages) . '</p>';
                        echo '<form method="post">';
                        echo '<input type="hidden" name="delete_pages" value="' . esc_attr(json_encode($matchedPages)) . '">';
                        wp_nonce_field('csv_page_delete');
                        echo '<ul>';
                        foreach ($matchedPages as $page_id) {
                            $page = get_post($page_id);
                            echo '<li><a href="' . esc_url(get_permalink($page_id)) . '" target="_blank">' . esc_html($page->post_title) . '</a></li>';
                        }
                        echo '</ul>';
                        echo '<p><strong>Warning:</strong> This will permanently delete the matched pages. This action cannot be undone.</p>';
                        submit_button('Permanently Delete All Matched Pages', 'delete', 'confirm_delete', true, [
                            'onclick' => "return confirm('Are you sure you want to permanently delete all matched pages?');"
                        ]);
                        echo '</form>';
                    } else {
                        echo '<p>No matches found.</p>';
                    }
                }
            }
        }
    }

    // Show upload form always
    ?>
    <form method="post" enctype="multipart/form-data">
        <?php wp_nonce_field('csv_page_upload'); ?>
        <input type="file" name="csv_file" accept=".csv" required />
        <?php submit_button('Upload & Match'); ?>
    </form>
    </div>
    <?php
}
